import{createRequire as w}from"node:module";import{tex as $}from"@mdit/plugin-tex";const o=r=>r.replace(/&/gu,"&amp;").replace(/</gu,"&lt;").replace(/>/gu,"&gt;").replace(/"/gu,"&quot;").replace(/'/gu,"&#039;"),y=w(import.meta.url);let s=!0,c;try{c=(await import("katex")).default}catch{s=!1}const S=(r,t,a)=>{try{const e=c.renderToString(r,{...t,displayMode:!1});return a?e.replace(/ class="katex"/g,' v-pre class="katex"'):e}catch(e){return t.throwOnError&&console.warn(e),`<span ${a?"v-pre ":""}class='katex-error' title='${o(e.toString())}'>${o(r)}</span>`}},v=(r,t,a)=>{try{return`<p ${a?"v-pre ":""}class='katex-block'>${c.renderToString(r,{...t,displayMode:!0})}</p>
`}catch(e){return t.throwOnError&&console.warn(e),`<p ${a?"v-pre ":""}class='katex-block katex-error' title='${o(e.toString())}'>${o(r)}</p>
`}},f=(r,t={})=>{if(!s){console.error('[@mdit/plugin-katex]: "katex" not installed!');return}const{allowInlineWithSpace:a=!1,mathFence:e=!1,mhchem:i=!1,logger:m=n=>n==="newLineInDisplayMode"?"ignore":"warn",vPre:l=!1,...u}=t;i&&y("katex/contrib/mhchem"),r.use($,{allowInlineWithSpace:a,mathFence:e,render:(n,g,h)=>{const p={strict:(k,x,d)=>m(k,x,d,h)??"ignore",throwOnError:!1,...u};return g?v(n,p,l):S(n,p,l)}})};export{f as katex};
//# sourceMappingURL=index.js.map
