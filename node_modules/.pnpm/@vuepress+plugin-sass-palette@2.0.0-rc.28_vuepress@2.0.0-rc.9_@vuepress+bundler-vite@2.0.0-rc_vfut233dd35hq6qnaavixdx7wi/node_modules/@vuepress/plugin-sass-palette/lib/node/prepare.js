import { getPath } from './utils.js';
export const prepareConfigFile = (app, id) => app.writeTemp(`sass-palette/load-${id}.js`, `\
import "@sass-palette/${id}-inject";
export default {};
`);
export const prepareInjectSass = (app, id) => app.writeTemp(`sass-palette/${id}-inject.scss`, `\
@use "sass:meta";

@use "@sass-palette/helper";
@use "@sass-palette/${id}-palette";

$palette-variables: meta.module-variables("${id}-palette");
${app.env.isDebug
    ? `
@debug "${id} palette variables: #{meta.inspect($palette-variables)}";
@debug "${id} config variables: #{meta.inspect(meta.module-variables("${id}-config"))}";
`
    : ''}

@if meta.global-variable-exists("dark-selector", $module: "${id}-config") {
  @include helper.inject($palette-variables, ${id}-config.$dark-selector);
} @else {
  @include helper.inject($palette-variables);
}
`);
export const prepareConfigSass = (app, { id, defaultConfig, defaultPalette, generator, userConfig, userPalette, }) => app.writeTemp(`sass-palette/${id}-config.scss`, `\
@import "file:///${getPath(defaultPalette)}";
@import "file:///${getPath(defaultConfig)}";
@import "file:///${getPath(userPalette)}";
@import "file:///${getPath(userConfig)}";
@import "file:///${getPath(generator)}";
`);
export const preparePaletteSass = (app, { id, defaultPalette, generator, userPalette }) => app.writeTemp(`sass-palette/${id}-palette.scss`, `\
@import "file:///${getPath(defaultPalette)}";
@import "file:///${getPath(userPalette)}";
@import "file:///${getPath(generator)}";
`);
export const prepareStyleSass = (app, { id, userStyle }) => userStyle
    ? app.writeTemp(`sass-palette/${id}-style.scss`, `\
@forward "file:///${getPath(userStyle)}";
`)
    : Promise.resolve(null);
