import { computed, defineComponent, h, resolveComponent } from "vue";
import { usePageData, usePageFrontmatter } from "vuepress/client";
import CommonWrapper from "@theme-hope/components/CommonWrapper";
import HomePage from "@theme-hope/components/HomePage";
import NormalPage from "@theme-hope/components/NormalPage";
import PortfolioHome from "@theme-hope/components/PortfolioHome";
import SkipLink from "@theme-hope/components/SkipLink";
import { FadeSlideY } from "@theme-hope/components/transitions/index";
import { usePure, useThemeData, useThemeLocaleData, useWindowSize, } from "@theme-hope/composables/index";
import { RenderDefault } from "vuepress-shared/client";
export default defineComponent({
    // eslint-disable-next-line vue/multi-word-component-names
    name: "Layout",
    slots: Object,
    setup(_props, { slots }) {
        const themeData = useThemeData();
        const themeLocale = useThemeLocaleData();
        const page = usePageData();
        const frontmatter = usePageFrontmatter();
        const isPure = usePure();
        const { isMobile } = useWindowSize();
        const sidebarDisplay = computed(() => __VP_BLOG__
            ? themeLocale.value.blog?.sidebarDisplay ??
                themeData.value.blog?.sidebarDisplay ??
                "mobile"
            : "none");
        return () => [
            h(SkipLink),
            h(CommonWrapper, {}, {
                default: () => slots.default?.() ??
                    (frontmatter.value["portfolio"]
                        ? h(PortfolioHome)
                        : frontmatter.value.home
                            ? h(HomePage)
                            : h(isPure.value ? RenderDefault : FadeSlideY, () => h(NormalPage, { key: page.value.path }, {
                                top: slots.top
                                    ? () => slots.top()
                                    : null,
                                bottom: slots.bottom
                                    ? () => slots.bottom()
                                    : null,
                                contentBefore: slots.contentBefore
                                    ? () => slots.contentBefore()
                                    : null,
                                contentAfter: slots.contentAfter
                                    ? () => slots.contentAfter()
                                    : null,
                                tocBefore: slots.tocBefore
                                    ? () => slots.tocBefore()
                                    : null,
                                tocAfter: slots.tocAfter
                                    ? () => slots.tocAfter()
                                    : null,
                            }))),
                navScreenBottom: sidebarDisplay.value === "none"
                    ? () => h(resolveComponent("BloggerInfo"))
                    : null,
                sidebar: !isMobile.value && sidebarDisplay.value === "always"
                    ? () => h(resolveComponent("BloggerInfo"))
                    : null,
            }),
        ];
    },
});
//# sourceMappingURL=Layout.js.map