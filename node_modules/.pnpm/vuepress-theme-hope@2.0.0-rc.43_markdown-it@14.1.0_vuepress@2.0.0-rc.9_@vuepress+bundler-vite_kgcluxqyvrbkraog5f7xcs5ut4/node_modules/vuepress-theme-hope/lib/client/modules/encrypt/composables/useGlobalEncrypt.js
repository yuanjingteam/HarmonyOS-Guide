import { useSessionStorage, useStorage } from "@vueuse/core";
import { compareSync } from "bcrypt-ts/browser";
import { computed } from "vue";
import { useEncryptData } from "./useEncryptData.js";
const STORAGE_KEY = "VUEPRESS_HOPE_GLOBAL_TOKEN";
export const useGlobalEncrypt = () => {
    const encryptData = useEncryptData();
    const localToken = useStorage(STORAGE_KEY, "");
    const sessionToken = useSessionStorage(STORAGE_KEY, "");
    // Is globally encrypted
    const isEncrypted = computed(() => {
        const { global = false, admin = [] } = encryptData.value;
        return global && admin.length > 0;
    });
    // Valid token exists
    const isDecrypted = computed(() => {
        if (isEncrypted.value) {
            if (localToken.value)
                // None of the token matches
                return encryptData.value.admin.some((hash) => compareSync(localToken.value, hash));
            if (sessionToken.value)
                // None of the token matches
                return encryptData.value.admin.some((hash) => compareSync(sessionToken.value, hash));
        }
        return false;
    });
    const validate = (inputToken, keep = false) => {
        (keep ? localToken : sessionToken).value = inputToken;
    };
    return {
        isEncrypted,
        isDecrypted,
        validate,
    };
};
//# sourceMappingURL=useGlobalEncrypt.js.map